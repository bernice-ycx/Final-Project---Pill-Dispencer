#include <Wire.h>
#include <RTClib.h>
#include <LiquidCrystal_I2C.h>
#include <EEPROM.h>
#include <Stepper.h>

#define I2C_SDA 21
#define I2C_SCL 22

// Declare RTC
RTC_DS3231 rtc;
TwoWire I2C_RTC = TwoWire(0);

// Declare LCD using I2C (Address 0x27, 16x2 LCD)
LiquidCrystal_I2C lcd(0x27, 16, 2); // Address 0x27 for a 16x2 LCD

int val;
int addr = 0;

const int stepsPerRevolution = 2048;
Stepper stepperName = Stepper(stepsPerRevolution, 13, 23, 5, 19);

// Declare push button states and flags
int push1state = 0, push2state = 0, push3state = 0;

const int stopPin = 17; // Stop button pin

// Declare screen and buzzer-related variables
int screens = 0;
int maxScreen = 2;
bool isScreenChanged = true;
long previousMillis = 0;
long interval = 500;

int ledState = LOW;
int buzz = 16; // Buzzer pin

// Push button pins
const int push1pin = 12;
const int push2pin = 14;
const int push3pin = 27;

// LED pin
const int ledPin = 2;  // LED pin declaration

// Setup time display for LCD
void setup() {
  Serial.begin(9600); // Start serial communication

  I2C_RTC.begin(I2C_SDA, I2C_SCL);  // Initialize RTC with SDA and SCL pins

  if (!rtc.begin()) { // Check if RTC is connected
    Serial.println("Couldn't find RTC");
    while (1);
  }

  if (rtc.lostPower()) {
    Serial.println("RTC lost power, setting the time");
  }

  rtc.adjust(DateTime(2024, 11, 14, 7, 59, 50));

  lcd.begin(16, 2); // Initialize LCD
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Welcome To");
  lcd.setCursor(0, 1);
  lcd.print("Medicine Reminder");
  delay(1000);

  pinMode(push1pin, INPUT_PULLUP);
  pinMode(push2pin, INPUT_PULLUP);
  pinMode(push3pin, INPUT_PULLUP);
  pinMode(ledPin, OUTPUT);  // LED pin initialization
  pinMode(buzz, OUTPUT);  // Buzzer pin initialization

  Wire.begin(I2C_SDA, I2C_SCL);  // Initialize I2C for ESP32 with SDA and SCL pins

  // Read previously saved push button state from EEPROM
  val = EEPROM.read(addr);
  if (val == 1) {
    push1state = 1;
  } else if (val == 2) {
    push2state = 1;
  } else if (val == 3) {
    push3state = 1;
  }
}

// Main loop
void loop() {
  // Check push buttons to set reminder frequency (Once, Twice, Thrice)
  push1();
  push2();
  push3();

  // Remind at set times
  if (push1state == 1) at8am();
  else if (push2state == 1) {
    at8am();
    at8pm();
  }
  else if (push3state == 1) {
    at8am();
    at2pm();
    at8pm();
  }

  // Update screens periodically
  changeScreen();
}

// Function to check and set reminder for once a day (8am)
void push1() {
  if (digitalRead(push1pin) == LOW) {  // Button pressed (pull-up resistor, so LOW when pressed)
    EEPROM.write(addr, 1);
    push1state = 1;
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Reminder set");
    lcd.setCursor(0, 1);
    lcd.print("for Once/day!");
    delay(500);
  }
}

// Function to check and set reminder for twice a day (8am and 8pm)
void push2() {
  if (digitalRead(push2pin) == LOW) {  // Button pressed (pull-up resistor, so LOW when pressed)
    EEPROM.write(addr, 2);
    push2state = 1;
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Reminder set");
    lcd.setCursor(0, 1);
    lcd.print("for Twice/day!");
    delay(500);
  }
}

// Function to check and set reminder for thrice a day (8am, 2pm, 8pm)
void push3() {
  if (digitalRead(push3pin) == LOW) {  // Button pressed (pull-up resistor, so LOW when pressed)
    EEPROM.write(addr, 3);
    push3state = 1;
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Reminder set");
    lcd.setCursor(0, 1);
    lcd.print("for Thrice/day!");
    delay(500);
  }
}

// Function to start buzzing at 8am
void at8am() {
  DateTime now = rtc.now();
  if (now.hour() == 8 && now.minute() == 0 && now.second() == 0) {
    startBuzz();
    moveStepper();
  }
}

// Function to start buzzing at 2pm
void at2pm() {
  DateTime now = rtc.now();
  if (now.hour() == 8 && now.minute() == 1 && now.second() == 0) {
    startBuzz();
    moveStepper();
  }
}

// Function to start buzzing at 8pm
void at8pm() {
  DateTime now = rtc.now();
  if (now.hour() == 8 && now.minute() == 2 && now.second() == 0) {
    startBuzz();
    moveStepper();
  }
}

// Function to control buzzer
void startBuzz() {
  digitalWrite(ledPin, HIGH);  // Blink LED and buzzer
  delay(500);
  digitalWrite(ledPin, LOW);
  delay(500);
  digitalWrite(buzz, HIGH);  // Turn on buzzer
  delay(1000);
  digitalWrite(buzz, LOW);  // Turn off buzzer
}

void moveStepper() {
  int stepsForReminder = stepsPerRevolution / 5;  // 2048 steps / 5 = 409.6 steps (rounded to 410)
  stepperName.setSpeed(5);  // Set speed (RPM)
  stepperName.step(stepsForReminder);  // Move the stepper by 410 steps (360/5 degrees)
}

void changeScreen() {
  static unsigned long lastTime = 0;
  unsigned long currentTime = millis();
  DateTime now = rtc.now();

  if (currentTime - lastTime > 5000) { // Change screen every 5 seconds
    lastTime = currentTime;
    screens++;
    if (screens > maxScreen) screens = 0;
    isScreenChanged = true;
  }

  if (isScreenChanged) {
    isScreenChanged = false;
    switch (screens) {
      case 0:
        lcd.clear();
        lcd.print("Stay Healthy :)");
        break;

      case 1:
        lcd.clear();
        lcd.print("Press buttons to");
        lcd.setCursor(0, 1);
        lcd.print("set reminders");
        break;

      case 2:
        // Display current time in HH:MM:SS format
        lcd.clear();
        lcd.setCursor(0, 0);
        if (now.hour() < 10) lcd.print("0");
        lcd.print(now.hour(), DEC);
        lcd.print(":");
        if (now.minute() < 10) lcd.print("0");
        lcd.print(now.minute(), DEC);
        lcd.print(":");
        if (now.second() < 10) lcd.print("0");
        lcd.print(now.second(), DEC);
        lcd.setCursor(0, 1);  // Move to second row

        // If reminder time matches, display "Time to eat your pills"
        if (now.hour() == 8 && now.minute() == 0 && now.second() == 0) {
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("Time to eat your pills!");
          delay(2000);  // Display for 2 seconds
          lcd.clear();
        } else if (now.hour() == 14 && now.minute() == 0 && now.second() == 0) {
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("Time to eat your pills!");
          delay(2000);  // Display for 2 seconds
          lcd.clear();
        } else if (now.hour() == 20 && now.minute() == 0 && now.second() == 0) {
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("Time to eat your pills!");
          delay(2000);  // Display for 2 seconds
          lcd.clear();
        }
        break;
    }
  }
}

